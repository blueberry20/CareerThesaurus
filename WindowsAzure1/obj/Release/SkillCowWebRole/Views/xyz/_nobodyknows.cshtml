@using SkillCow.Classes.Cloud.TableStorage.PersonalityTests.SkillCowRequestSubmissions
@using Microsoft.WindowsAzure.StorageClient
@using Newtonsoft.Json.Linq
@using System.Text;
@using SkillCow.Classes.Helpers
@model SkillCowRequestSubmissionClient
@{
    ViewBag.Title = "Index";
}

<script>
    function settoday() {
        $('#startdate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).ToString("yyyyMMdd"))');
        $('#enddate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).ToString("yyyyMMdd"))');
        document.forms[0].submit();
    }
    function setyesterday() {
        $('#startdate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).AddDays(-1).ToString("yyyyMMdd"))');
        $('#enddate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).AddDays(-1).ToString("yyyyMMdd"))');
        document.forms[0].submit();
    }

    var d = new Date()
    var n = d.getTimezoneOffset();
    
</script>
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: center; padding: 20px;">
    
    @using (Html.BeginForm())
{
    <table style="font-style: italic;">
        <tr>
            <td>Search name:</td>
            <td><input type="text" id="searchname" name="searchname" value="@(ViewBag.SearchName)"/> </td>
        </tr>
        <tr>
            <td>Start date:</td>
            <td><input type="text" id="startdate" name="startdate" value="@(ViewBag.StartDate.ToString("yyyyMMdd"))"/> </td>
        </tr>
        <tr>
            <td>End date:</td>
            <td><input type="text" id="enddate" name="enddate" value="@(ViewBag.EndDate.ToString("yyyyMMdd"))"/> </td>
            <td><input type="submit" value="Go"/></td>
            <td><input type="button" value="Today" onclick="settoday();"/></td>
            <td><input type="button" value="Yesterday" onclick="setyesterday();"/></td>
        </tr>
        
    </table>
    
}
</div>
@{
    int internalgradyearpass = 0;
    int externalgradyearpass = 0;
    int externalcnt = 0;
    int externalleads = 0;
    int internalcnt = 0;
    int internalleads = 0;
    int cnt = 0;
    
    Dictionary<string, int> topschools = new Dictionary<string, int>();
    
    List<SkillCowRequestSubmission> allrecords = new List<SkillCowRequestSubmission>();
    
    DateTime cursordate = ViewBag.StartDate;

    string searchname = ViewBag.SearchName;

    if (searchname != null && searchname.Trim()!="")
    {
        while(cursordate<=ViewBag.EndDate)
        {
            CloudTableQuery<SkillCowRequestSubmission> query = Model.GetAll(cursordate.ToString("yyyyMMdd"));
            allrecords.AddRange(query.Execute().Where(x => (x.Name != null && x.Name.ToLower().Contains(searchname))).OrderBy(x => x.Timestamp));
            cursordate = cursordate.AddDays(1);
        }
    }
    else{
        while (cursordate <= ViewBag.EndDate)
        {
            CloudTableQuery<SkillCowRequestSubmission> query = Model.GetAll(cursordate.ToString("yyyyMMdd"));
            allrecords.AddRange(query.Execute().OrderBy(x => x.Timestamp));
            cursordate = cursordate.AddDays(1);
        }
    }
    
    
}
<br />
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
    <h1>Internal campaigns</h1>
    <br />
    <table>
        <tr>
            <th>#</th>
            <th>Sal</th>
            <th>Name</th>
            <th>Zip</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Grad</th>
            <!--<th>Recommendations</th>-->
            
            <th>CampaignId</th>
            <th>UtmSource</th>
            <th>UtmContent</th>
            
            <th>SearchResultId</th>

            <th>SourceForm</th>
            <th>Client</th>
            <th>Form</th>
            <th>Local Time</th>
            
            <th>Result</th>
        </tr>
    @foreach (var submission in allrecords)
    {
        
        if (submission.Email != null)
        {
            bool external = submission.CampaignId == "13564694" || submission.CampaignId == "13574635";

            int igradyear;
            bool gradyearpass = false;
            if (int.TryParse(submission.GradYear, out igradyear))
            {
                if (igradyear < EasternTimeConverter.Convert(DateTime.UtcNow).Year || EasternTimeConverter.Convert(DateTime.UtcNow).Month > 5 && igradyear <= EasternTimeConverter.Convert(DateTime.UtcNow).Year)
                {
                    gradyearpass = true;
                }
            }

            if (!external)
            {

                internalcnt++;

                //TOP CAREER CHOICES
                JObject toppicks = null;
                int toppickscount = 0;
                string recordtype = "";
                if (submission.SourceForm == null || submission.SourceForm == "")
                {
                    if (gradyearpass)
                    {
                        recordtype = "LEAD";
                    }
                    else
                    {
                        recordtype = "HS";
                    }

                    internalleads++;
                    if (gradyearpass)
                    {
                        internalgradyearpass++;
                    }


                    if (submission.Data != null && submission.Data != "")
                    {
                        string data = submission.Data;
                        if (!data.Contains("careerchoices") && data.Contains("priority"))
                        {
                            data = "{\"careerchoices\":" + data + "}";
                        }
                        toppicks = JObject.Parse(data);
                        if (toppicks["careerchoices"] != null)
                        {
                            toppickscount = toppicks["careerchoices"].Count();
                        }
                    }

                    //SCHOOL ALLOCATION
                    if (!topschools.ContainsKey(submission.ClientId + " " + submission.FormId))
                    {
                        topschools.Add(submission.ClientId + " " + submission.FormId, 0);
                    }
                    topschools[submission.ClientId + " " + submission.FormId]++;

                }


                //MAP RESULTS TO TOP CHOICES
                StringBuilder sbprof = new StringBuilder();
                if (submission.Recommendations != null && submission.Recommendations != "")
                {
                    JObject json = JObject.Parse(submission.Recommendations);

                    int pcnt = json["professions"].Count();
                    for (int i = 0; i < pcnt; i++)
                    {
                        string careerName = json["professions"][i]["name"].ToString();

                        string sup = "";
                        for (int j = 0; j < toppickscount; j++)
                        {
                            if (toppicks["careerchoices"] != null)
                            {
                                if (careerName == toppicks["careerchoices"][j]["name"].ToString())
                                {
                                    int priority = int.Parse(toppicks["careerchoices"][j]["priority"].ToString());
                                    string bgcolor = "";
                                    switch (priority)
                                    {
                                        case 0:
                                            bgcolor = "rgba(0,255,255,1)";
                                            break;
                                        case 1:
                                            bgcolor = "rgba(0,255,0,1)";
                                            break;
                                        case 2:
                                            bgcolor = "rgba(255,255,0,1)";
                                            break;
                                        default:
                                            bgcolor = "rgba(255,128,0,0.5)";
                                            break;
                                    }


                                    sup = "<sup style=\"background-color:" + bgcolor + "; color: #000; font-size: 8pt; padding: 0 3px 0 3px;\">" + (priority + 1) + "</sup>";
                                    break;
                                }
                            }
                        }

                        sbprof.Append(careerName + sup + "; ");
                    }

                }

            
            <tr>
                <td align="right">@(++cnt)</td>
                <td>@(submission.Salutation)</td>
                <td>@(submission.Name)</td>
                <td>@(submission.Zip)</td>
                <td>@(submission.Address1)</td>
                <td>@(submission.Email)</td>
                <td>@(submission.Phone)</td>
                <td>@(submission.GradYear)</td>
                
                <!--<td align="left">@Html.Raw(sbprof.ToString())</td>-->
                
                <td>@(submission.CampaignId)</td>
                
                <td>@(submission.UtmSource)</td>
                <td>@(submission.UtmContent)</td>
                
                <td>@(submission.SchoolSearchResultId)</td>

                <td>@(recordtype)</td>
                <td>@(submission.ClientId)</td>
                <td>@(submission.FormId)</td>
                <td>@(submission.Timestamp.AddHours(-4))</td>
                <td>@submission.SubmissionResult</td>
            </tr>
            }
        }
    }
    </table>

</div>
<br />
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
<h1>External campaigns</h1>
    
    <br />
    <table>
        <tr>
            <th>#</th>
            <th>Sal</th>
            <th>Name</th>
            <th>Zip</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Grad</th>
            
            <!--<th>Recommendations</th>-->
            
            <th>CampaignId</th>
            <th>UtmSource</th>
            <th>UtmCampaign</th>
            <th>UtmContent</th>
            <th>UtmTerm</th>

            <th>SourceForm</th>
            <th>Client</th>
            <th>Form</th>
            <th>Local Time</th>
            <th>Posted</th>
            <th>Result</th>
        </tr>
    @foreach (var submission in allrecords)
    {
        if(submission.Email!=null)
        {

            bool external = submission.CampaignId == "13564694";

            bool istest = submission.Email.Contains("test.com") || submission.Name.Contains("test");
        
            int igradyear;
            bool gradyearpass=false;
            if(int.TryParse(submission.GradYear, out igradyear))
            {
                if(igradyear<EasternTimeConverter.Convert(DateTime.UtcNow).Year || EasternTimeConverter.Convert(DateTime.UtcNow).Month>5 && igradyear<=EasternTimeConverter.Convert(DateTime.UtcNow).Year)
                {
                    gradyearpass = true;   
                }
            }
            
            
            if (external)
            {
                externalcnt++;
            
                //TOP CAREER CHOICES
                JObject toppicks = null;
                int toppickscount = 0;
                string recordtype = "";
                if (!istest && (submission.SourceForm == null || submission.SourceForm == ""))
                {
                    if (gradyearpass)
                    {
                        recordtype = "LEAD";
                    }
                    else
                    {
                        recordtype = "HS";
                    }

                    externalleads++;
                    if (gradyearpass)
                    {
                        externalgradyearpass++;
                    }
            

                    if (submission.Data != null && submission.Data != "")
                    {
                        string data = submission.Data;
                        if (!data.Contains("careerchoices") && data.Contains("priority"))
                        {
                            data = "{\"careerchoices\":" + data + "}";
                        }
                        toppicks = JObject.Parse(data);
                        if (toppicks["careerchoices"] != null)
                        {
                            toppickscount = toppicks["careerchoices"].Count();
                        }
                    }

                    //SCHOOL ALLOCATION
                    if (!topschools.ContainsKey(submission.ClientId + " " + submission.FormId))
                    {
                        topschools.Add(submission.ClientId + " " + submission.FormId, 0);
                    }
                    topschools[submission.ClientId + " " + submission.FormId]++;

                }


                //MAP RESULTS TO TOP CHOICES
                StringBuilder sbprof = new StringBuilder();
                if (submission.Recommendations != null && submission.Recommendations != "")
                {
                    JObject json = JObject.Parse(submission.Recommendations);

                    int pcnt = json["professions"].Count();
                    for (int i = 0; i < pcnt; i++)
                    {
                        string careerName = json["professions"][i]["name"].ToString();

                        string sup = "";
                        for (int j = 0; j < toppickscount; j++)
                        {
                            if (toppicks["careerchoices"] != null)
                            {
                                if (careerName == toppicks["careerchoices"][j]["name"].ToString())
                                {
                                    int priority = int.Parse(toppicks["careerchoices"][j]["priority"].ToString());
                                    string bgcolor = "";
                                    switch (priority)
                                    {
                                        case 0:
                                            bgcolor = "rgba(0,255,255,1)";
                                            break;
                                        case 1:
                                            bgcolor = "rgba(0,255,0,1)";
                                            break;
                                        case 2:
                                            bgcolor = "rgba(255,255,0,1)";
                                            break;
                                        default:
                                            bgcolor = "rgba(255,128,0,0.5)";
                                            break;
                                    }


                                    sup = "<sup style=\"background-color:" + bgcolor + "; color: #000; font-size: 8pt; padding: 0 3px 0 3px;\">" + (priority + 1) + "</sup>";
                                    break;
                                }
                            }
                        }

                        sbprof.Append(careerName + sup + "; ");
                    }

                }

            
                <tr>
                    <td align="right">@(++cnt)</td>
                    <td>@(submission.Salutation)</td>
                    <td>@(submission.Name)</td>
                    <td>@(submission.Zip)</td>
                    <td>@(submission.Address1)</td>
                    <td>@(submission.Email)</td>
                    <td>@(submission.Phone)</td>
                    <td>@(submission.GradYear)</td>
                
                    <!--<td align="left">@Html.Raw(sbprof.ToString())</td>-->

                    <td>@(submission.CampaignId)</td>
                
                    <td>@(submission.UtmSource)</td>
                    <td>@(submission.UtmCampaign)</td>
                    <td>@(submission.UtmContent)</td>
                    <td>@(submission.UtmTerm)</td>
                
                
                    <td>@(recordtype)</td>
                    <td>@(submission.ClientId)</td>
                    <td>@(submission.FormId)</td>
                    <td>@(submission.Timestamp.AddHours(-4))</td>
                    <td>@submission.PostedString</td>
                    <td></td>
                </tr>
            }
        }
    }
    </table>
    
    <div class="rounded20bl" style="position: fixed; top: 0px; right: 0px; font-size: 20pt; background-color: rgba(255,255,255,0.5); padding: 10px 20px 10px 20px; text-align: right;">
        External: <span>@(externalgradyearpass)</span> / <span>@(externalleads)</span> / <span>@(externalcnt)</span> = @(externalcnt > 0 ? String.Format("{0:0.00%}", (double)externalleads / externalcnt) : "")<br />
        Internal: <span>@(internalgradyearpass)</span> / <span>@(internalleads)</span> / <span>@(internalcnt)</span> = @(internalcnt > 0 ? String.Format("{0:0.00%}", (double)internalleads / internalcnt) : "")
    </div>


</div>
<br />
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
    <h1>Total schools: @(topschools.Count)</h1>
    @{IOrderedEnumerable<KeyValuePair<string, int>> ordered = topschools.OrderByDescending(x => x.Value);}
    <table>
    @{int schoolcount=0;}
    @foreach (KeyValuePair<string, int> kv in ordered)
    {
        <tr>
            <td>@(kv.Key)</td>
            <td>@(kv.Value)</td>
        </tr>
    }
    </table>
</div>


<style>
    th { text-align: left;}   
    td {padding: 0 10px 0 1px; color: #000;}
</style>