@{
    ViewBag.Title = "Results";
}

<link href="~/Content/css/Careers/Careers.css" rel="stylesheet" />

<script src='/Scripts/Thesaurus/ctProfessions.js'></script>
<script src='/Scripts/Thesaurus/ctProfessionsCodes.js'></script>
<script src='/Scripts/Jobs/gettime.js'></script>

<div class="pageContainer" id="testResultsPage">
    <div class="container">
        <div id="main" class="row">
        </div>
        <div class="btn-group btn-group-justified">
            <div class="btn-group">
                <button type="button" id="field" class="btn btn-default displayBy" onclick="popularityResults(this);">By Field</button>
            </div>
            <div class="btn-group">
                <button type="button" id="edulevel" class="btn btn-default displayBy" onclick="educationResults(this);">By Education</button>
            </div>
            <div class="btn-group">
                <button type="button" id="salary" class="btn btn-default displayBy" onclick="salaryResults(this);">By Salary</button>
            </div>
        </div>
    </div>
</div>

<style>
    .header {
        font-size: 42px;
        font-weight: 700;
        text-align: center;
    }
    .subheader {
        font-size: 36px;
        color: white;
        background-color: black;
        padding: 8px;
    }
    .proTitle {
        display: block;
        font-size: 20px;
    }
    .profession {
        padding: 8px;
        border-bottom: 1px solid black;
        display: block;
    }
    .subfooter {
        font-size: 20px;
        margin: 17px 10px;
    }
    .indeedCount {
        display: block;
        margin-left: 20px;
        font-size: 12px;
        min-height: 17px;
    }
    .viewJobs {
        float: right;
        font-size: 20px;
        background-color: rgb(30, 175, 30);
        color: white;
        padding: 8px;
    }
    .viewJobs:hover, .viewJobs:focus {
        text-decoration:none;
    }
    .red {
        color: red;
    }
    .asTitle {
        color: gray;
    }
</style>

<script>
    var user = '@ViewBag.Email';
    var profileType = '@ViewBag.ProfileType';

    var gotJobs = false;
    var dimensions = { attitude: "", information: "", processing: "", action: "", endurance: "", presence: "", concentration: "", patterns: "", compensation: "" };
    var userzip = getCookie('zip') ? getCookie('zip') : getCookie('ipzip') != '*' ? getCookie('ipzip') : '10001';
    var matchedProfessions = [];
    var ctSalaryRange = [{ min: 0, max: 30000, caption: 'under 30k' }, { min: 30000, max: 60000, caption: '30k to 60k' }, { min: 60000, max: 100000, caption: '60k to 100k' }, { min: 100000, max: Infinity, caption: 'over 100k' }];

    function document_ready() {
        getDimensions(); // get dimensions from cookies
        $('.viewJobs').click(function () {
            setCookie('clr', '1', 365);
        });
    }

    function getDimensions() {
        for (var property in dimensions) {
            if (dimensions.hasOwnProperty(property)) {
                dimensions[property] = getCookie(property) ? getCookie(property) : '';
            }
        }
        matchResults();
    }

    function matchResults() {
        matchedProfessions = [];
        for (var i = 0; i < professions.length; i++) {
            matchProfession(professions[i]);
        }
        popularityResults($('#field'));
    }
    function matchProfession(item) {
        var rank = 0;
        if (dimensions.attitude != '' && (!(item.attitude == '' || item.attitude == dimensions.attitude))) { return; } else if (dimensions.attitude != '' && item.attitude == dimensions.attitude) { rank++; }
        if (dimensions.information != '' && (!(item.information == '' || item.information == dimensions.information))) { return; } else if (dimensions.information != '' && item.information == dimensions.information) { rank++; }
        if (dimensions.processing != '' && (!(item.processing == '' || item.processing == dimensions.processing))) { return; } else if (dimensions.processing != '' && item.processing == dimensions.processing) { rank++; }
        if (dimensions.action != '' && (!(item.action == '' || item.action == dimensions.action))) { return; } else if (dimensions.action != '' && item.action == dimensions.action) { rank++; }
        if (dimensions.endurance != '' && (!(item.endurance == '' || item.endurance == dimensions.endurance))) { return; } else if (dimensions.endurance != '' && item.endurance == dimensions.endurance) { rank++; }
        if (dimensions.presence != '' && (!(item.presence == '' || item.presence == dimensions.presence))) { return; } else if (dimensions.presence != '' && item.presence == dimensions.presence) { rank++; }
        if (dimensions.concentration != '' && (!(item.concentration == '' || item.concentration == dimensions.concentration))) { return; } else if (dimensions.concentration != '' && item.concentration == dimensions.concentration) { rank++; }
        if (dimensions.patterns != '' && (!(item.patterns == '' || item.patterns == dimensions.patterns))) { return; } else if (dimensions.patterns != '' && item.patterns == dimensions.patterns) { rank++; }
        if (dimensions.compensation != '' && (!(item.compensation == '' || item.compensation == dimensions.compensation))) { return; } else if (dimensions.compensation != '' && item.compensation == dimensions.compensation) { rank++; }
        item.rank = rank;
        matchedProfessions.push(item);
    }

    function popularityResults(el) {
        var popular = matchedProfessions.map(function (x) { x.fieldPopularity = matchedProfessions.filter(function (y) { return y.minor == x.minor }).map(function (z) { return z.popularity; }).reduce(function (a, b) { return a + b }); return x; });
        popular.sort(sort_by('fieldPopularity', { name: 'popularity', primer: null, reverse: false })).reverse();
        matchedProfessions = popular;
        var currentField;
        var html = '<div class="header">You may do GREAT in:</div>';
        for (var i = 0; i < popular.length; i++) {
            if (currentField != popular[i].minor) {
                html += currentField ? '<div class="subfooter"><a target="_blank" href="/Jobs?q=' + ctMinor[currentField].replace(/[^a-zA-Z]+/g, '+') + '&loc=' + userzip + '&r=&salary=&st=&jt=">View all jobs in ' + ctMinor[currentField] + '<i class="fa fa-angle-right pull-right"></i></a></div>' : '';
                currentField = popular[i].minor;
                html += '<div class="subheader">' + ctMinor[currentField] + '</div>';
            }
            html += '<div class="profession"><a target="_blank" class="viewJobs" href="/Jobs?q=' + popular[i].title.replace(/[^a-zA-Z]+/g, '+') + '&loc=' + userzip + '&salary=&st=&jt=&r=">View these jobs</a><span class="proTitle"><span class="asTitle">as</span> ' + popular[i].title + '</span><span id="indeed' + i + '" class="indeedCount">' + (popular[i].output ? popular[i].output : '') + '</span></div>';
        }
        html += '<div class="subfooter"><a target="_blank" href="/Jobs?q=' + ctMinor[currentField].replace(/[^a-zA-Z]+/g, '+') + '&loc=' + userzip + '&r=&salary=&st=&jt=">View all jobs in ' + ctMinor[currentField] + '<i class="fa fa-angle-right pull-right"></i></a></div>';
        $('#main').html(html);
        $('.displayBy').removeClass('active');
        $(el).addClass('active');
        if (!gotJobs) {
            getJobs(popular, false);
        }
    }

    function educationResults(el) {
        var educationSort = matchedProfessions;
        educationSort.sort(sort_by('minedulevel', { name: 'popularity', primer: null, reverse: false })).reverse();
        var currentEduLevel;
        var html = '<div class="header">You will do GREAT as ...</div>';
        for (var i = 0; i < educationSort.length; i++) {
            if (currentEduLevel != educationSort[i].minedulevel) {
                html += currentEduLevel ? '<div class="subfooter">View all jobs with ' + ctEduLevel[currentEduLevel] + '</div><i class="fa fa-angle-right pull-right"></i>' : '';
                currentEduLevel = educationSort[i].minedulevel;
                html += '<div class="subheader">with ' + ctEduLevel[currentEduLevel] + '</div>';
            }
            html += '<div class="profession"><a target="_blank" class="viewJobs" href="/Jobs?q=' + educationSort[i].title.replace(/[^a-zA-Z]+/g, '+') + '&loc=' + userzip + '&salary=&st=&jt="&r=>View these jobs</a><span class="proTitle">... ' + educationSort[i].title + '</span><span id="indeed' + i + '" class="indeedCount">' + (educationSort[i].output ? educationSort[i].output : '') + '</span></div>';
        }
        html += '<div class="subfooter">View all jobs with ' + ctEduLevel[currentEduLevel] + '<i class="fa fa-angle-right pull-right"></i></div>';
        $('#main').html(html);
        $('.displayBy').removeClass('active');
        $(el).addClass('active');
        if (!gotJobs) {
            getJobs(educationSort, false);
        }
    }

    function salaryResults(el) {
        var salarySort = matchedProfessions;
        var lastLine;
        salarySort.sort(sort_by('salary', { name: 'popularity', primer: null, reverse: false })).reverse();
        var currentSalaryRange = getSalaryRange(Math.max.apply(Math, salarySort.map(function (x) { return x.salary; })));
        var html = '<div class="header">You will do GREAT as ...</div><div class="subheader">with ' + ctSalaryRange[currentSalaryRange].caption + '</div>';
        for (var i = 0; i < salarySort.length; i++) {
            if (ctSalaryRange[currentSalaryRange].min > salarySort[i].salary || ctSalaryRange[currentSalaryRange].max <= salarySort[i].salary) {
                html += currentSalaryRange ? '<div class="subfooter"><a target="_blank" href="/Jobs?q=&loc=' + userzip + '&r=&st=&jt=&salary=' + ctSalaryRange[currentSalaryRange].min + '">View all jobs with ' + ctSalaryRange[currentSalaryRange].caption + '<i class="fa fa-angle-right pull-right"></i></a></div>' : '';
                currentSalaryRange = getSalaryRange(salarySort[i].salary);
                html += '<div class="subheader">with ' + ctSalaryRange[currentSalaryRange].caption + '</div>';
            }
            html += '<div class="profession"><a target="_blank" class="viewJobs" href="/Jobs?q=' + salarySort[i].title.replace(/[^a-zA-Z]+/g, '+') + '&loc=' + userzip + '&st=&jt=&salary=' + ctSalaryRange[currentSalaryRange].min + '&r=">View these jobs</a><span class="proTitle">... ' + salarySort[i].title + '</span><span id="indeed' + i + '" class="indeedCount">' + (salarySort[i].output ? salarySort[i].output : '') + '</span></div>';
        }
        html += '<div class="subfooter"><a target="_blank" href="/Jobs?q=&loc=' + userzip + '&r=&st=&jt=&salary=' + ctSalaryRange[currentSalaryRange].min + '">View all jobs with ' + ctSalaryRange[currentSalaryRange].caption + '<i class="fa fa-angle-right pull-right"></i></a></div>';
        $('#main').html(html);
        $('.displayBy').removeClass('active');
        $(el).addClass('active');
        if (!gotJobs) {
            getJobs(salarySort, true);
        }
    }

    function sortByPopularity(a, b) {
        if (a.popularity > b.popularity) return -1; if (a.popularity < b.popularity) return 1; return 0;
    }

    function getSalaryRange(salary) {
        if (salary - 100000 > 0) {
            return 3;
        } else if (salary - 60000 > 0) {
            return 2;
        } else if (salary - 30000 > 0) {
            return 1;
        } else {
            return 0;
        }
    }
    function getJobs(professions, salary) {
        for (var i = 0; i < professions.length; i++) {
            getIndeed(i, professions[i].title.replace(/[^a-zA-Z]+/g, '+'), salary ? ctSalaryRange[getSalaryRange(professions[i].salary)].min : false);
        }
        gotJobs = true;
    }

    function getIndeed(id, q, salary, extendedRange) {
        $.ajax({
            url: appserverurl + "/Jobs/getindeedjobs",
            type: "POST",
            dataType: "json",
            data: {
                p: q,
                l: userzip,
                limit: "25",
                r: extendedRange ? extendedRange : '25',
                s: 'date',
                salary: salary ? salary : ''
            }
        }).success(function (response) {
            if (response.results) {                
                var today = response.results.results.filter(function (x) { return getTimeFrame(x.date) < 1; });
                var week = response.results.results.filter(function (x) { return getTimeFrame(x.date) < 7; });
                var month = response.results.results.filter(function (x) { return getTimeFrame(x.date) < 30; });
                var threeMonths = response.results.results.filter(function (x) { return getTimeFrame(x.date) < 90; });
                var output = '';
                if (today.length > 0) {
                    output = today.length >= 25 ? '25+ <span class="red">new</span> jobs posted today' : today.length + ' <span class="red">new</span> jobs posted today';
                } else if (week.length > 0) {
                    output = week.length >= 25 ? '25+ <span class="red">new</span> jobs posted in past week' : week.length + ' <span class="red">new</span> jobs posted in past week';
                } else if (month.length > 0) {
                    output = month.length >= 25 ? '25+ <span class="red">new</span> jobs posted in last 30 days' : month.length + ' <span class="red">new</span> jobs posted in last 30 days';
                } else if (threeMonths.length > 0) {
                    output = threeMonths.length >= 25 ? '25+ <span class="red">new</span> jobs posted in last 90 days' : threeMonths.length + ' <span class="red">new</span> jobs posted in last 90 days';
                } else if (!extendedRange) {
                    getIndeed(id, q, salary, 50);
                } else if (extendedRange && extendedRange < 500) {
                    getIndeed(id, q, salary, extendSearch(extendedRange));
                }
                output += extendedRange ? ' in ' + extendedRange + ' miles radius' : '';
                matchedProfessions[id].output = output;
                $('#indeed' + id).html(output);
                if (extendedRange) {
                    var link = $('#indeed' + id).siblings('a');
                    $(link).attr('href', $(link).attr('href').replace(/\&r\=\d*/, '&r=' + extendedRange));
                }                    
            }      
        }).error(function (error) {
            console.log(error);
        });
    }

    function getTimeFrame(date) {
        var now = new Date().getTime();
        return (now - getTimestampFromIndeedTime(date)) / 86400000;
    }

    function extendSearch(extendedRange) {
        switch (extendedRange) {
            case 50:
                return 100;
            case 100:
                return 250;
            case 250:
                return 500;
            default:
                return null;
        }
    }

    var sort_by;

    (function () {
        // utility functions
        var default_cmp = function (a, b) {
            if (a == b) return 0;
            return a < b ? -1 : 1;
        },
            getCmpFunc = function (primer, reverse) {
                var dfc = default_cmp, // closer in scope
                    cmp = default_cmp;
                if (primer) {
                    cmp = function (a, b) {
                        return dfc(primer(a), primer(b));
                    };
                }
                if (reverse) {
                    return function (a, b) {
                        return -1 * cmp(a, b);
                    };
                }
                return cmp;
            };

        // actual implementation
        sort_by = function () {
            var fields = [],
                n_fields = arguments.length,
                field, name, reverse, cmp;

            // preprocess sorting options
            for (var i = 0; i < n_fields; i++) {
                field = arguments[i];
                if (typeof field === 'string') {
                    name = field;
                    cmp = default_cmp;
                }
                else {
                    name = field.name;
                    cmp = getCmpFunc(field.primer, field.reverse);
                }
                fields.push({
                    name: name,
                    cmp: cmp
                });
            }

            // final comparison function
            return function (A, B) {
                var a, b, name, result;
                for (var i = 0; i < n_fields; i++) {
                    result = 0;
                    field = fields[i];
                    name = field.name;

                    result = field.cmp(A[name], B[name]);
                    if (result !== 0) break;
                }
                return result;
            }
        }
    }()); 
</script>