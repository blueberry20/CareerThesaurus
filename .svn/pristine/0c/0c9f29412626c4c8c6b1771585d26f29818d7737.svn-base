@using SkillCow.Classes.Cloud.TableStorage.PersonalityTests.SkillCowRequestSubmissions
@using Microsoft.WindowsAzure.StorageClient
@using Newtonsoft.Json.Linq
@using System.Text;
@using SkillCow.Classes.Helpers
@model SkillCowRequestSubmissionClient
@{
    ViewBag.Title = "Kiosks";
}

<script>
    function settoday() {
        $('#startdate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).ToString("yyyyMMdd"))');
        $('#enddate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).ToString("yyyyMMdd"))');
        document.forms[0].submit();
    }
    function setyesterday() {
        $('#startdate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).AddDays(-1).ToString("yyyyMMdd"))');
        $('#enddate').val('@(EasternTimeConverter.Convert(DateTime.UtcNow).AddDays(-1).ToString("yyyyMMdd"))');
        document.forms[0].submit();
    }

    var d = new Date()
    var n = d.getTimezoneOffset();
    
</script>
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: center; padding: 20px;">
    
    @using (Html.BeginForm())
    {
        <table style="font-style: italic;">
            <tr>
                <td>Start date:</td>
                <td><input type="text" id="startdate" name="startdate" value="@(ViewBag.StartDate.ToString("yyyyMMdd"))"/> </td>
            </tr>
            <tr>
                <td>End date:</td>
                <td><input type="text" id="enddate" name="enddate" value="@(ViewBag.EndDate.ToString("yyyyMMdd"))"/> </td>
                <td><input type="submit" value="Go"/></td>
                <td><input type="button" value="Today" onclick="settoday();"/></td>
                <td><input type="button" value="Yesterday" onclick="setyesterday();"/></td>
            </tr>
        </table>
    
    }
</div>
@{
    
    Dictionary<string, int> topschools = new Dictionary<string, int>();
    
    List<SkillCowRequestSubmission> allrecords = new List<SkillCowRequestSubmission>();
    
    DateTime cursordate = ViewBag.StartDate;
    
    while(cursordate<=ViewBag.EndDate)
    {
        CloudTableQuery<SkillCowRequestSubmission> query1 = Model.ByCampaign(cursordate.ToString("yyyyMMdd"), "13564694");
        CloudTableQuery<SkillCowRequestSubmission> query2 = Model.ByCampaign(cursordate.ToString("yyyyMMdd"), "13574635");
        
        
        allrecords.AddRange(query1.Execute().Where(submission=>submission.UtmSource=="Kiosks").OrderBy(x => x.Timestamp));
        allrecords.AddRange(query2.Execute().Where(submission => submission.UtmSource == "Kiosks").OrderBy(x => x.Timestamp));
        
        cursordate = cursordate.AddDays(1);
    }

    Dictionary<string, Dictionary<string, object>> summary = new Dictionary<string, Dictionary<string, object>>();
    Dictionary<string, int> totals = new Dictionary<string, int>();
    
    totals["Records"] = 0;
    totals["School Leads"] = 0;
    totals["Young Leads"] = 0;
    
    Dictionary<string, Dictionary<string, int>> uniquesByRep = new Dictionary<string,Dictionary<string, int>>();
        
    
    foreach (var submission in allrecords)
    {
        if (submission.UtmCampaign != "CollegeBound")
        {
            string location = submission.UtmCampaign;
            string rep = submission.UtmContent;
            string type;
            
            if(submission.ClientId == "20")
            {
                type = "Records"; 
            }
            else
            {
                int igradyear;
                bool gradyearpass = false;
                if (int.TryParse(submission.GradYear, out igradyear))
                {
                    if (igradyear < EasternTimeConverter.Convert(DateTime.UtcNow).Year || EasternTimeConverter.Convert(DateTime.UtcNow).Month > 5 && igradyear <= EasternTimeConverter.Convert(DateTime.UtcNow).Year)
                    {
                        gradyearpass = true;
                    }
                }
                if(gradyearpass)
                {
                    type = "School Leads"; 
                }
                else
                {
                    type = "Young Leads";  
                }
            }

            string key = location + rep;
        
            totals[type]++;
        
            if(summary.ContainsKey(key))
            {
                summary[key][type] = (int)summary[key][type] + 1;
            }
            else
            {
                summary.Add(key, new Dictionary<string,object>());
                summary[key]["Location"] = location;
                summary[key]["Rep"] = rep;
                summary[key]["Records"] = 0; 
                summary[key]["School Leads"] = 0;
                summary[key]["Young Leads"] = 0;
                summary[key][type] = 1;
            }
        
            if(!uniquesByRep.ContainsKey(location + rep))
            {
                uniquesByRep.Add(location + rep, new Dictionary<string,int>());
            }
        
            if(!uniquesByRep[location+rep].ContainsKey(submission.Phone))
            {
                uniquesByRep[location + rep].Add(submission.Phone, 1);
            }
        }
    }

    IOrderedEnumerable<KeyValuePair<string, Dictionary<string, object>>> sorted = summary.OrderByDescending(x => ((double)(int)x.Value["School Leads"] / ((int)x.Value["Records"] + (int)x.Value["School Leads"]))
        * ((double)((int)x.Value["Records"] + (int)x.Value["School Leads"]) / allrecords.Count));
}

<br />
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
    <h1>Stats by Source</h1>
    
    <br />
    <table>
        <tr>
            <th>Location</th>
            <th>Rep</th>
            <th>Records</th>
            <th>School Leads</th>
            <th>Young Leads</th>
            <th>Uniques</th>
            <th>Leads/Unique</th>
            <th>Leads/Records</th>
            <th>Size</th>
            <th>Weight</th>
        </tr>
        @foreach (KeyValuePair<string, Dictionary<string, object>> kv in sorted)
        {
            double ratio = ((double)(int)kv.Value["School Leads"] / ((int)kv.Value["Records"] + (int)kv.Value["School Leads"]));
            double size = ((double)((int)kv.Value["Records"] + (int)kv.Value["School Leads"]) / allrecords.Count);

            int uniques = uniquesByRep[kv.Value["Location"].ToString() + kv.Value["Rep"].ToString()].Count();
            double leadstouniques = ((double)(int)kv.Value["School Leads"] / uniques);
        <tr>
            <td>@(kv.Value["Location"].ToString())</td>
            <td>@(kv.Value["Rep"].ToString())</td>
            <td align="right">@(kv.Value["Records"].ToString())</td>
            <td align="right">@(kv.Value["School Leads"].ToString())</td>
            <td align="right">@(kv.Value["Young Leads"].ToString())</td>
            <td align="right">@(uniques)</td>
            <td align="right">@String.Format("{0:0.00}", leadstouniques)</td>
            <td align="right">@String.Format("{0:0.00%}", ratio)</td>
            <td align="right">@String.Format("{0:0.00%}", size)</td>
            <td align="right">@String.Format("{0:0.00%}", ratio * size)</td>
        </tr>
        }

        @{
            double totalratio = ((double)(int)totals["School Leads"] / ((int)totals["Records"] + (int)totals["School Leads"]));
            double totalsize = ((double)((int)totals["Records"] + (int)totals["School Leads"]) / allrecords.Count);
        }
        
        <tr>
            <td></td>
            <td></td>
            <td align="right"><b>@(((int)totals["Records"]).ToString())</b></td>
            <td align="right"><b>@(((int)totals["School Leads"]).ToString())</b></td>
            <td align="right"><b>@(((int)totals["Young Leads"]).ToString())</b></td>
            <td align="right"></td>
            <td align="right"></td>
            <td align="right"><b>@String.Format("{0:0.00%}", totalratio)</b></td>
            <td align="right"></td>
            <td align="right"></td>
        </tr>
        
    </table>
    
</div>

@{int cnt = 0;}
<br />
<div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
<h1>Submissions</h1>
    
    <br />
    <table>
        <tr>
            <th>@(++cnt)</th>
            <th>UtmCampaign</th>
            <th>UtmContent</th>
            <th>UtmTerm</th>
            <th>SourceForm</th>
            <th>Posted String</th>
            <th>Result</th>
            <th>Local Time</th>
        </tr>
    @foreach (var submission in allrecords)
    {
        <tr>
            <td align="right"></td>
                
            <td>@(submission.UtmCampaign)</td>
            <td>@(submission.UtmContent)</td>
            <td>@(submission.UtmTerm)</td>
            <td>@(submission.SourceForm)</td>
            <td>@(submission.PostedString)</td>
            <td>@(submission.SubmissionResult)</td>
            <td>@(submission.Timestamp.AddHours(-4))</td>
        </tr>
        }
        
    }
    </table>
    
</div>

<style>
    th { text-align: left;}   
    td {padding: 0 10px 0 1px; color: #000;}
</style>