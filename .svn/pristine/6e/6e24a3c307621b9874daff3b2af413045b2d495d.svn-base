using System.Web.Script.Serialization;
using SkillCowResponsive.Classes.Cloud.TableStorage.UserAccount;
using SkillCowResponsive.Classes.Cloud.TableStorage.StudentProfile;
using SkillCowResponsive.Classes.Cloud.TableStorage.AdminProfile;
using SkillCowResponsive.Classes.Cloud.TableStorage.School;
using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentGroup;
using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentGroupPinCode;
using SkillCowResponsive.Classes.Encryption;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Web.Mvc;
using SkillCowResponsive.Classes;
using SkillCowResponsive.Classes.Helpers;

namespace SkillCowResponsive.Controllers
{
    public class SignupController : AuthenticatedControllerController
    {
        //
        // GET: /Signup/
        [HttpGet]
        //public ActionResult Student(string school, string code)
        public ActionResult Student(string id)
        {
            if (id != null)
            {
                AssessmentGroupPinCodeClient agpcc = new AssessmentGroupPinCodeClient();
                AssessmentGroupPinCode groupInfo = agpcc.GetByPartitionAndRowKey("pincodes", id);
                if (groupInfo != null)
                {
                    SchoolAccountClient sac = new SchoolAccountClient();
                    SchoolAccount schoolAccount = sac.GetByPartitionAndRowKey("school", groupInfo.School);
                    ViewBag.SignUpSchoolZip = schoolAccount.ZipCode;
                    ViewBag.SignUpSchool = groupInfo.School;
                    ViewBag.SignUpSchoolName = schoolAccount.SchoolName;
                    ViewBag.SignUpCode = groupInfo.PinCode;
                    ViewBag.SignUpGroup = groupInfo.Group;
                    ViewBag.SignUpTeacher = groupInfo.Teacher;
                }
                else
                {
                    ViewBag.InvalidLink = true;
                }
            }
            //if (school != null && code != null)
            //{
            //    AssessmentGroupClient agc = new AssessmentGroupClient();
            //    AssessmentGroup group = agc.GetByPartitionAndRowKey(school, code);
            //    if (group != null)
            //    {
            //        SchoolAccountClient sac = new SchoolAccountClient();
            //        SchoolAccount schoolAccount = sac.GetByPartitionAndRowKey("school", school);
            //        ViewBag.SignUpSchoolZip = schoolAccount.ZipCode;
            //        ViewBag.SignUpSchool = school;
            //        ViewBag.SignUpSchoolName = schoolAccount.SchoolName;
            //        ViewBag.SignUpCode = code;
            //        ViewBag.SignUpGroup = group.Group;
            //        ViewBag.SignUpTeacher = group.Teacher;
            //    }
            //}
            return View();
        }

        public ActionResult Administrator()
        {
            return View();
        }
        [HttpPost]
        public ActionResult Student(FormCollection collection)
        {
            UserAccountClient aac = new UserAccountClient();
            UserAccount account = aac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(collection["email"]), collection["email"]);
            if (account == null)
            {
                aac.AddNewItem(new UserAccount { PartitionKey = UserAccountClient.GetPartitionKeyForEmail(collection["email"]), RowKey = collection["email"].ToLower(), FirstName = collection["firstname"], LastName = collection["lastname"], Email = collection["email"], Password = collection["password"], ProfileType = "student" });
                StudentProfileClient spc = new StudentProfileClient();
                string school = collection["school"] != null ? collection["school"] : "";
                string teacher = collection["teacher"] != null ? collection["teacher"] : "";
                string group = collection["group"] != null ? collection["group"] : "";
                spc.AddNewItem(new StudentProfile { PartitionKey = StudentProfileClient.GetPartitionKeyForEmail(collection["email"]), RowKey = collection["email"].ToLower(), Gender = collection["gender"], GradYear = collection["gradyear"], School = school, SchoolZip = collection["zipcode"], Teacher = teacher, Group = group });
            }
            else
            {
                ViewBag.ErrorMessage = "There is an account already associated with this email. Please log in instead.";
                return View();             
            }

            SendVerificationEmail(collection["email"], collection["firstname"]);

            //=========================================================================================================================================================================================
            //string sessionkey = ClientSession.GetClientSessionKey("user", collection["email"], collection["firstname"] + " " + collection["lastname"], "student");
            //Response.Cookies["sessionkey"].Value = sessionkey;
            //Response.Cookies["sessionusername"].Value = collection["email"];
            //Response.Cookies["firstname"].Value = collection["fistname"];
            //Response.Cookies["lastname"].Value = collection["lastname"];
            //Response.Cookies["email"].Value = collection["email"];
            //Response.Cookies["gender"].Value = collection["gender"];
            //=========================================================================================================================================================================================
            
            return RedirectToAction("Student", "Assessment");            
        }
        [HttpPost]
        public ActionResult Administrator(FormCollection collection)
        {
            UserAccountClient aac = new UserAccountClient();
            UserAccount account = aac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(collection["email"]), collection["email"].ToLower());
            if (account == null)
            {
                aac.AddNewItem(new UserAccount { PartitionKey = UserAccountClient.GetPartitionKeyForEmail(collection["email"]), RowKey = collection["email"].ToLower(), FirstName = collection["firstname"], LastName = collection["lastname"], Email = collection["email"], Password = collection["password"], ProfileType = "administrator" });
                AdminProfileClient apc = new AdminProfileClient();
                apc.AddNewItem(new AdminProfile { RowKey = collection["email"].ToLower(), PhoneNumber = collection["phonenumber"]});
            }
            else
            {
                ViewBag.ErrorMessage = "There is an account already associated with this email. Please log in instead.";
                return View();
                 
            }

            //=========================================================================================================================================================================================
            //string sessionkey = ClientSession.GetClientSessionKey("user", collection["email"], collection["firstname"] + " " + collection["lastname"], "administrator");
            //Response.Cookies["sessionkey"].Value = sessionkey;
            //Response.Cookies["sessionusername"].Value = collection["email"];
            //=========================================================================================================================================================================================
            
            EmailManager emailManager = new EmailManager();
            string str = "<p>Full name: " + collection["firstname"] + " " + collection["lastname"] + "</p><p>Email: " + collection["email"] + "</p><p>Phone Number: " + collection["phonenumber"] + "</p>";
            emailManager.SendMail("no-reply@careerthesaurus.com", "Admin", "mike@peopli.com", "HS Admin", str);
            return RedirectToAction("Administrator", "Assessment");
        }
        [HttpPost]
        public HttpResponse GetSchoolsByZip(string zipcode)
        {
            SchoolAccountClient sac = new SchoolAccountClient();
            List<SchoolAccount> schoolList = new List<SchoolAccount>(sac.GetByZipCode(zipcode));
            JavaScriptSerializer jss = new JavaScriptSerializer();
            string response = schoolList.Count != 0 ? "{\"result\": \"ok\", \"results\":" + jss.Serialize(schoolList) + "}" : "{\"result\": \"ok\", \"results\":[]}";
            Response.ContentType = "application/json";
            Response.Write(response);
            Response.End();
            return null;
        }
        [HttpPost]
        public HttpResponse GetTeacherAndGroup(string pincode, string school)
        {
            string response;
            AssessmentGroupClient agc = new AssessmentGroupClient();
            AssessmentGroup group = agc.GetByPartitionAndRowKey(school, pincode);
            if (group != null) {
                response = "{\"result\": \"ok\", \"teacher\":\"" + group.Teacher + "\", \"group\":\"" + group.Group + "\"}";
            }
            else
            {
                response = "{\"result\": \"ok\", \"teacher\":\"\", \"group\":\"\"}";
            }
            Response.ContentType = "application/json";
            Response.Write(response);
            Response.End();
            return null;
        }

        private void SendVerificationEmail(string email, string name)
        {
            SimpleAES aes = new SimpleAES();
            string token = aes.EncryptToString(email.ToLower());
            string url = "http://CareerThesaurus.com/Account/ConfirmEmail/" + token;
            EmailManager emailManager = new EmailManager();
            string str = "<div>Hi " + name + ",</div><br><div>Thanks for creating an account with CareerThesaurus. Click below to confirm your email address:</div>" +
                "<a href=\"" + url + "\">" + url + "</a><br><br>" +
                "<div>If you have problems, please paste the above URL into your web browser. </div><br><div>Thanks,</div><div>CareerThesuarus Support </div>";
            emailManager.SendMail("no-reply@careerthesaurus.com", "CareerThesaurus", email, "Account Notification - Confirm Email", str);
        }

        private void updateEmailVerification()
        {
            UserAccountClient uac = new UserAccountClient();
            List<UserAccount> accounts = new List<UserAccount>(uac.GetAll());
            foreach (UserAccount account in accounts)
            {
                account.EmailConfirmed = true;
                uac.Update(account);
            }
        }
        private void CreatePinCodeClass()
        {
            AssessmentGroupPinCodeClient agpcc = new AssessmentGroupPinCodeClient();
            AssessmentGroupClient agc = new AssessmentGroupClient();
            List<AssessmentGroup> accounts = new List<AssessmentGroup>(agc.GetAll());
            foreach (AssessmentGroup account in accounts)
            {
                agpcc.AddNewItem(new AssessmentGroupPinCode { RowKey = ShortGuidGenerator.NewGuid(), PinCode = account.RowKey, School = account.PartitionKey, Teacher = account.Teacher, Group = account.Group });
            }
        }
        private void UpdatePartitionKeys()
        {
            UserAccountClient uac = new UserAccountClient();
            List<UserAccount> accounts =  new List<UserAccount>(uac.GetAll());
            foreach (UserAccount account in accounts)
            {
                //uac.Delete(account);
                //uac.AddNewItem(new UserAccount { PartitionKey = UserAccountClient.GetPartitionKeyForEmail(account.RowKey), RowKey = account.RowKey, FirstName = account.FirstName, LastName = account.LastName, Email = account.Email, Password = account.Password, ProfileType = account.ProfileType });
            }
            StudentProfileClient spc = new StudentProfileClient();
            List<StudentProfile> students = new List<StudentProfile>(spc.GetAll());
            foreach (StudentProfile student in students)
            {
                //spc.Delete(student);
                //spc.AddNewItem(new StudentProfile { PartitionKey = StudentProfileClient.GetPartitionKeyForEmail(student.RowKey), RowKey = student.RowKey, Gender = student.Gender, GradYear = student.GradYear, School = student.School, SchoolZip = student.SchoolZip, Teacher = student.Teacher, Group = student.Group });
            }
        }
    }
}
