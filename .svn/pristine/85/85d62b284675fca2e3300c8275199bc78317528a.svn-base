using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;

using SkillCowResponsive.Classes.Cloud.TableStorage.StudentAccount;
using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentInterest;
using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentCareer;

//using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentInterestRating;
//using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentCareerRating;
//using SkillCowResponsive.Classes.Cloud.TableStorage.StudentProfile;

namespace SkillCowResponsive.Controllers
{
    public class CareersController : AuthenticatedControllerController
    {
        //
        // GET: /Careers/


        public ActionResult Index(string id)
        {
            if (id == null)
            {
                return View();
            }
            else
            {
                return View(id);
            }
        }
        public ActionResult ByInterest()
        {

            return View();
        }
        public ActionResult SelectInterests()
        {
            return View();
        }
        public ActionResult ByPersonality()
        {
            return View();
        }
        public ActionResult ByPersonalityV2()
        {
            return View();
        }

        public ActionResult In(string id)
        {
            return View();
        }

        public ActionResult Index_pics()
        {
            return View();
        }

        [HttpPost]
        public void SaveInterest(string user, string interest, string rating)
        {
            StudentAccountClient sac = new StudentAccountClient();
            StudentAccount student = sac.GetByPartitionAndRowKey(StudentAccountClient.GetPartitionKeyForEmail(user), user);
            if (student != null)
            {
                AssessmentInterestClient aic = new AssessmentInterestClient();
                AssessmentInterest interestRating = aic.GetByPartitionAndRowKey(student.School, user + student.Year + student.Grade + interest);
                if (interestRating == null)
                {
                    aic.AddNewItem(new AssessmentInterest { PartitionKey = student.School, RowKey = user + student.Year + student.Grade + interest, Value = rating, Counselor = student.Counselor, Student = user, Grade = student.Grade, GroupName = student.GroupName, Interest = interest, Year = student.Year });
                    //airc.AddNewItem(new AssessmentInterestRating { PartitionKey = student.School, RowKey = user + interest, Rating = rating, GradYear = student.GradYear, Student = user, Teacher = student.Teacher, Group = student.Group });
                }
                else
                {
                    interestRating.Value = rating;
                    aic.Update(interestRating);
                }
            }

            //StudentProfileClient spc = new StudentProfileClient();
            //StudentProfile student = spc.GetByPartitionAndRowKey(StudentProfileClient.GetPartitionKeyForEmail(user), user);
            //AssessmentInterestRatingClient airc = new AssessmentInterestRatingClient();
            //AssessmentInterestRating interestRating = airc.GetByPartitionAndRowKey(student.School, user + interest);
        }
        [HttpPost]
        public void SaveCareerRating(string user, string career, string rating)
        {
            StudentAccountClient sac = new StudentAccountClient();
            StudentAccount student = sac.GetByPartitionAndRowKey(StudentAccountClient.GetPartitionKeyForEmail(user), user);
            if (student != null)
            {
                AssessmentCareerClient acc = new AssessmentCareerClient();
                AssessmentCareer careerRating = acc.GetByPartitionAndRowKey(student.School, user + student.Year + student.Grade + career);
                if (careerRating == null)
                {
                    acc.AddNewItem(new AssessmentCareer { PartitionKey = student.School, RowKey = user + student.Year + student.Grade + career, Value = rating, Counselor = student.Counselor, Student = user, Grade = student.Grade, GroupName = student.GroupName, DolCode = career, Year = student.Year });
                    //acrc.AddNewItem(new AssessmentCareerRating { PartitionKey = student.School, RowKey = user + career, DolCode = career, Rating = rating, GradYear = student.GradYear, Student = user, Teacher = student.Teacher, Group = student.Group });
                    if (rating == "1")
                    {
                        student.RatedCareers++;
                    }
                    else
                    {
                        student.DislikeCareers++;
                    }
                    sac.Update(student);
                }
                else
                {
                    if (careerRating.Value != rating) {
                        if (rating == "1")
                        {
                            student.DislikeCareers--;
                            student.RatedCareers++;
                        }
                        else
                        {
                            student.DislikeCareers++;
                            student.RatedCareers--;
                        }
                        sac.Update(student);
                    }
                    careerRating.Value = rating;
                    acc.Update(careerRating);
                }
            }

            //StudentProfileClient spc = new StudentProfileClient();
            //StudentProfile student = spc.GetByPartitionAndRowKey(StudentProfileClient.GetPartitionKeyForEmail(user), user);
            //AssessmentCareerRatingClient acrc = new AssessmentCareerRatingClient();
            //AssessmentCareerRating careerRating = acrc.GetByPartitionAndRowKey(student.School, user + career);
        }
        class CareerRating
        {
            public string dolcode { get; set; }
            public string rating { get; set; }
        }
        [HttpPost]
        public HttpResponse GetCareerRatings(string user)
        {
            JavaScriptSerializer jss = new JavaScriptSerializer();

            StudentAccountClient sac = new StudentAccountClient();
            StudentAccount student = sac.GetByPartitionAndRowKey(StudentAccountClient.GetPartitionKeyForEmail(user), user);
            AssessmentCareerClient acc = new AssessmentCareerClient();
            List<AssessmentCareer> careerRatings = new List<AssessmentCareer>(acc.GetAllCurrentByStudent(student.School, user, student.Year, student.Grade));

            //StudentProfileClient spc = new StudentProfileClient();
            //StudentProfile student = spc.GetByPartitionAndRowKey(StudentProfileClient.GetPartitionKeyForEmail(user), user);
            //AssessmentCareerRatingClient acrc = new AssessmentCareerRatingClient();
            //List<AssessmentCareerRating> careerRatings =  new List<AssessmentCareerRating>(acrc.GetAllBySchoolAndStudent(student.School, user));
            List<CareerRating> results = new List<CareerRating>();
            string response;
            if (careerRatings.Count != 0)
            {
                foreach (AssessmentCareer careerRating in careerRatings)
                {
                    results.Add(new CareerRating { dolcode = careerRating.DolCode, rating = careerRating.Value });
                }
                response = "{\"result\": \"ok\", \"results\":" + jss.Serialize(results) + "}";
            }
            else
            {
                response = "{\"result\": \"ok\", \"results\":[]}";
            }            
            Response.ContentType = "application/json";
            Response.Write(response);
            Response.End();
            return null;
        }
    }
}
