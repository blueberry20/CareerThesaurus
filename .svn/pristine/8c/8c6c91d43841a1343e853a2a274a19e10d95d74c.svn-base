using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.ServiceBus.Messaging;
using System.Reflection;
using System.Text;
using SkillCowResponsive.Classes.Helpers;

namespace SkillCowResponsive.Classes.DeferredProcesses
{
    public enum DeferredProcessExitCode
    {
        Success = 1,
        NothingToDo = 0,
        Error = -1
    }
    public abstract class DeferredProcess
    {
        protected string ID { get; set; }
        protected string Line { get; set; }
        protected string ErrorDescription { get; set; }

        public static DeferredProcessExitCode CreateAndExecute(MessageBroker messageBroker,  BrokeredMessage message, int instanceNumber, int threadNumber)
        {
            DeferredProcessExitCode retval = DeferredProcessExitCode.NothingToDo;
            DeferredProcess newprocess = null;
            try
            {
                Type deferredType = Assembly.GetAssembly(typeof(DeferredProcess)).GetType(message.Properties["Class"].ToString());
                if (deferredType == null)
                {
                    return DeferredProcessExitCode.NothingToDo;
                }

                newprocess = (DeferredProcess)Activator.CreateInstance(deferredType);

                newprocess.ID = message.Properties["ID"] != null ? message.Properties["ID"].ToString() : "";

                foreach (PropertyInfo pi in deferredType.GetProperties())
                {
                    Type declaringType = pi.PropertyType;

                    try
                    {
                        switch (declaringType.Name)
                        {
                            case "Double":
                                pi.SetValue(newprocess, double.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            case "Float":
                                pi.SetValue(newprocess, float.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            case "Int64":
                                pi.SetValue(newprocess, Int64.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            case "Int32":
                                pi.SetValue(newprocess, Int32.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            case "DateTime":
                                pi.SetValue(newprocess, DateTime.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            case "Boolean":
                                pi.SetValue(newprocess, Boolean.Parse(message.Properties[pi.Name].ToString()), null);
                                break;
                            default:
                                pi.SetValue(newprocess, message.Properties[pi.Name], null);
                                break;
                        }
                    }
                    catch
                    {
                        //Ignore the property setting error
                    }
                }

                //Time the execution
                long ts = DateTime.UtcNow.Ticks;
                retval = newprocess.Execute(messageBroker);
                double milliseconds = (new TimeSpan(DateTime.UtcNow.Ticks - ts)).TotalMilliseconds;
            }
            catch
            {
                retval = DeferredProcessExitCode.Error;
            }
            finally
            {
                newprocess = null;
            }
            return retval;
        }

        public string ExportPropertiesAsJSON()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("{");

            if (ID != null && ID != "")
                sb.Append("\"ID\":\"" + ID.ToJSONSafeString() + "\"");

            Type deferredType = this.GetType();

            foreach (PropertyInfo pi in deferredType.GetProperties(BindingFlags.Public | BindingFlags.Instance))
            {
                Type declaringType = pi.PropertyType;

                try
                {
                    if (pi.GetValue(this, null) != null)
                    {
                        switch (declaringType.Name)
                        {
                            case "Double":
                            case "Float":
                            case "Int64":
                            case "Int32":
                                sb.Append(", \"" + pi.Name + "\":" + pi.GetValue(this, null).ToString() + "");
                                pi.GetValue(this, null).ToString();
                                break;
                            case "DateTime":
                            case "Boolean":
                            case "String":
                                sb.Append(", \"" + pi.Name + "\":\"" + pi.GetValue(this, null).ToString() + "\"");
                                pi.GetValue(this, null).ToString();
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch
                {
                    //Ignore the property setting error
                }
            }

            if (ErrorDescription != null && ErrorDescription != "")
                sb.Append(", \"ErrorDescription\":\"" + ErrorDescription.ToJSONSafeString() + "\"");

            sb.Append("}");

            return sb.ToString();
        }

        protected virtual DeferredProcessExitCode Execute(MessageBroker messageBroker)
        {
            throw new NotImplementedException();
        }

        public DeferredProcessExitCode Run()
        {
            return Run(null, true);
        }
        public DeferredProcessExitCode Run(MessageBroker msgbroker)
        {
            return Run(msgbroker, false);
        }
        public DeferredProcessExitCode Run(MessageBroker messageBroker, bool runImmediately)
        {
            if (runImmediately || messageBroker == null)
            {
                try
                {
                    DeferredProcessExitCode exitcode = this.Execute(messageBroker);

                    //CloudLogger.Instance.Info(this.GetType().Name, "Run", "Execute", exitcode.ToString(), this.ToJSON());

                    return exitcode;
                }
                catch
                {
                    return DeferredProcessExitCode.Error;
                }
            }
            else
            {
                try
                {
                    messageBroker.SendDeferredProcessAsMessage(this);
                    return DeferredProcessExitCode.Success;
                }
                catch
                {
                    return DeferredProcessExitCode.Error;
                }
            }
        }
    }
}