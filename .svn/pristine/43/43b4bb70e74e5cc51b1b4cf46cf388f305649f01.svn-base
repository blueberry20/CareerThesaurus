@using SkillCowResponsive.Classes.Cloud.TableStorage.School;
@using SkillCowResponsive.Classes.Cloud.TableStorage.SchoolToTeacherConnection;
@{
    SchoolToTeacherConnectionClient sttcc = new SchoolToTeacherConnectionClient();
    SchoolAccountClient sac = new SchoolAccountClient();
    ViewBag.Title = "Student Reports";
}

<!--===========================Aanalytics.Student Reports List========================================-->
<link href="~/Content/css/Assessment/assessment.css" rel="stylesheet" />
<link href="~/Content/css/Analytics/analytics.css" rel="Stylesheet" />

<div class="pageContainer whiteBgPage" id="studentListPage">
    <div class="container">
        <div class="row orgRow">
            <div class="classificationCrumbs col-lg-6 col-md-6 col-sm-12 col-xs-12">
                <a href="/AdminPortal">Administrator Home</a>
                <span>|</span>
                <a href="/Analytics">Analytics Home<i class="fa fa-angle-right"></i></a>
                <span>Student Reports</span>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 text-right">
                <span class="welcomeMsg">Welcome @ViewBag.Name!</span>
            </div>
        </div>

        <div class="row">
           <h1>students reports </h1>
        </div>

        <div class="reportContent">
            <div class="row dropdownWrapper">
                <div class="col-lg-1 col-md-1 col-sm-1 col-xs-12">
                    <label class="control-label">School:</label>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12">
                    <div class="dropdown schoolDropdown">
                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdown-school" data-toggle="dropdown">
                            <span class="btnLabel" id="schoolLabel">
                                @{
                                    string teacher = ViewBag.Email;
                                    List<SchoolToTeacherConnection> connections = new List<SchoolToTeacherConnection>(sttcc.GetAllActive(teacher));
                                    if (connections.Count == 0)
                                    {
                                        <script>
                                            var noSchools = true;
                                        </script>
                                    }
                                    else
                                    {
                                        SchoolAccount school = sac.GetByPartitionAndRowKey("school", connections[0].RowKey);
                                        @school.SchoolName;
                                    <script>
                                        var noSchools = false;
                                    </script>
                                    }
                                }
                            </span>

                            <span class="caret"></span>
                        </button>

                        <ul class="dropdown-menu" role="menu">
                            @{

                                if (connections.Count == 0)
                                {
                                    <li role="presentation"><a role="menuitem" tabindex="-1">No schools added</a></li>
                                }
                                else
                                {
                                    List<SchoolAccount> schools = new List<SchoolAccount>();
                                    foreach (SchoolToTeacherConnection connection in connections)
                                    {
                                        schools.Add(sac.GetByPartitionAndRowKey("school", connection.RowKey));
                                    }
                                    schools.Sort(delegate(SchoolAccount a, SchoolAccount b)
                                    {
                                        return a.SchoolName.CompareTo(b.SchoolName);
                                    });
                                    foreach (SchoolAccount school in schools)
                                    {
                                        <li id="btn1" role="presentation"><a role="menuitem" tabindex="-1" data-rowkey="@school.RowKey" onclick="getGroups(this);">@school.SchoolName</a></li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div class="groupLabel col-lg-1 col-md-1 col-sm-1 col-xs-12">
                    <label class="control-label">Groups:</label>
                </div>
                <div class="groupDropdown col-lg-5 col-md-5 col-sm-5 col-xs-12">
                    <div class="dropdown">
                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdown-class" data-toggle="dropdown">
                            <span class="btnLabel" id="groupsLabel">
                                Select Group
                            </span>
                            <span class="caret"></span>
                        </button>
                        <ul id="groups" class="dropdown-menu" role="menu" aria-labelledby="dropdown-class"></ul>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 noResultsError"><p>There are no groups added to this school.<p><a href="/Assessment/School">Go to add groups</a></div>
            </div>
            <div id="report">
                <!--html javascript-->
            </div>
        </div>


    </div>
</div>

<script>
    var teacher = '@ViewBag.Email';
    var schoolName = '';
    var groupName = '';

    function document_ready() {
        if (noSchools) {
            $('.reportContent').html('<div class="noResultsError"><p>There are no schools added to your account.<p><a href="/Assessment/AddSchool">Go to add schools</a></div>');
        } else {
            var selectSchool = getCookie('selectedSchool');
            var element = $('a[data-rowkey="' + selectSchool + '"]');
            if (selectSchool && element) {
                element.click();
                $('.schoolDropdown .btnLabel').text(element.text());
            } else {
                $('.schoolDropdown .dropdown-menu>li').eq(0).find('a').click();
                $('.schoolDropdown .btnLabel').text($('.schoolDropdown .dropdown-menu>li').eq(0).find('a').text());
            }
        }
    }

    function getGroups(school) {
        $('#schoolLabel').text($(school).text());
        $('#groupsLabel').text("All Groups");
        schoolName = $(school).data('rowkey');
        setCookie('selectedSchool', schoolName, 365);
        $.ajax({
            url: appserverurl + '/Analytics/GetGroupsForSchool',
            method: 'POST',
            dataType: 'json',
            data: {
                school: schoolName,
                teacher: teacher
            }
        }).success(function (response) {
            var groups = response.results;
            if (groups.length != 0) {
                $('.noResultsError').hide();
                $('.groupLabel, .groupDropdown').show();
                var html = '<li role="presentation"><a id="allGroups" role="menuitem" tabindex="-1" data-school="' + $(school).data('rowkey') + '" data-rowkey="" onclick="getData(this)">All groups</a></li>';
                for (var i = 0; i < groups.length; i++) {
                    html += '<li role="presentation"><a role="menuitem" tabindex="-1" data-school="' + $(school).data('rowkey') + '" data-rowkey="' + groups[i].Group + '" onclick="getData(this)">' + groups[i].Group + '</a></li>'
                }
                $('#groups').html(html);
                $('#allGroups').click();
            } else {
                $('.groupLabel, .groupDropdown').hide();
                $('#report').html('');
                $('.dropdownWrapper .noResultsError').show();
                $('.dropdownWrapper').append(html);
            }
            $('.dropdownWrapper').show();
        }).error(function (error) {

        });
    }

    function getData(group) {
        $('#groupsLabel').text($(group).text());
        groupName = (typeof $(group).data('rowkey') === 'undefined' ? '' : $(group).data('rowkey'));
        $.ajax({
            url: appserverurl + '/analytics/GetStudents',
            method: 'POST',
            dataType: 'json',
            data: {
                school: $(group).data('school'),
                teacher: teacher,
                group: groupName
            }
        }).success(function (response) {
            $('#report').html();
            var html = '<div class="row studentNames">' +
                            '<div class="searchBoxWrapper">' +
                            '<input id="searchbox" type="text" placeholder="Search by student\'s name" onkeyup="searchName(this.value);">' +
                            '</div>' +
                            '<p class="subheading">Click to view student\'s report card</p>' +
                            '<ol class="studentList">'
            var data = response.results;
            data.sort(sort_by('firstName', { name: 'lastName', primer: null, reverse: false }));

            for (var i = 0; i < data.length; i++) {
                html += '<li class="studentName"><a href="/Report/StudentReport/' + data[i].Email +'">' + data[i].firstName + ' ' + data[i].lastName +'</a><i class="fa fa-angle-right arrowRight"></i></li>';
            }

            html += '</ol></div>';

        if (data.length != 0) {
            $('#report').html(html);
        } else {
            $('#report').html('<div class="noResultsError"><p>There are no students in your groups yet</div>');
        }

        }).error(function (response) {
            console.log(response);
        });
    }
    function saveSchoolAndGroup() {
        setCookie('analyticsschoolname', schoolName, 1);
        setCookie('analyticsschoolgroup', groupName, 1);
    }
    function formatter(value, settings) {
        return value.toFixed(settings.decimals).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").replace(/\.\d/, '');
    }
    function searchName(value) {
        $('.studentName').each(function (index, element) {
            var name = $(element).find('a').text().toLowerCase();
            var regex = new RegExp(value.toLowerCase());
            if (!regex.test(name)) {
                $(element).hide();
            } else {
                $(element).show();
            }
        });
    }
    var sort_by;

    (function () {
        // utility functions
        var default_cmp = function (a, b) {
            a = a.toLowerCase();
            b = b.toLowerCase();
            if (a == b) return 0;
            return a < b ? -1 : 1;
        },
            getCmpFunc = function (primer, reverse) {
                var dfc = default_cmp, // closer in scope
                    cmp = default_cmp;
                if (primer) {
                    cmp = function (a, b) {
                        return dfc(primer(a), primer(b));
                    };
                }
                if (reverse) {
                    return function (a, b) {
                        return -1 * cmp(a, b);
                    };
                }
                return cmp;
            };

        // actual implementation
        sort_by = function () {
            var fields = [],
                n_fields = arguments.length,
                field, name, reverse, cmp;

            // preprocess sorting options
            for (var i = 0; i < n_fields; i++) {
                field = arguments[i];
                if (typeof field === 'string') {
                    name = field;
                    cmp = default_cmp;
                }
                else {
                    name = field.name;
                    cmp = getCmpFunc(field.primer, field.reverse);
                }
                fields.push({
                    name: name,
                    cmp: cmp
                });
            }

            // final comparison function
            return function (A, B) {
                var a, b, name, result;
                for (var i = 0; i < n_fields; i++) {
                    result = 0;
                    field = fields[i];
                    name = field.name;

                    result = field.cmp(A[name], B[name]);
                    if (result !== 0) break;
                }
                return result;
            }
        }
    }());
</script>
