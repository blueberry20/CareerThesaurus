using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SkillCowResponsive.Classes.Encryption;
using SkillCowResponsive.Classes;
using SkillCowResponsive.Classes.Helpers;
using SkillCowResponsive.Classes.Cloud.TableStorage.UserAccount;
using SkillCowResponsive.Classes.Cloud.TableStorage.StudentProfile;
using SkillCowResponsive.Classes.Cloud.TableStorage.AdminProfile;
using SkillCowResponsive.Classes.Cloud.TableStorage.AssessmentDimensionsRating; 

namespace SkillCowResponsive.Controllers
{
    public class AccountController : AuthenticatedControllerController
    {

        public string[] dimensions = { "attitude", "endurance", "action", "concentration", "information", "processing", "presence", "patterns", "compensation" };

        [HttpGet]
        public ActionResult Index()
        {
            if (AuthTokens == null)
            {
                return RedirectToAction("LogIn");
            }
            return View();
        }
        [HttpGet]
        public ActionResult LogIn()
        {
            if (AuthTokens != null)
            {
                return RedirectToAction("Index");
            }
            return View();
        }
        [HttpPost]
        public ActionResult LogIn(FormCollection collection)
        {
            UserAccountClient aac = new UserAccountClient();
            UserAccount account = aac.Logon(collection["email"], collection["password"]);
            if (account == null)
            {
                ViewBag.ErrorMessage = "Invalid Username or Password";
                return View();
            }
            else if (account.EmailConfirmed == false)
            {
                ViewBag.ErrorMessage = "You haven't confirm your email yet";
                ViewBag.ResendConfirmationEmail = true;
                return View();
            }

            string sessionkey = ClientSession.GetClientSessionKey("user", collection["email"], account.FirstName + " " + account.LastName, account.ProfileType);
            Response.Cookies["sessionkey"].Value = sessionkey;
            Response.Cookies["sessionusername"].Value = collection["email"];
            if (account.ProfileType == "administrator")
            {
                return RedirectToAction("Index", "AdminPortal");
            }
            else
            {
                StudentProfileClient spc = new StudentProfileClient();
                StudentProfile student = spc.GetByPartitionAndRowKey(StudentProfileClient.GetPartitionKeyForEmail(account.Email), account.Email);
                Response.Cookies["firstname"].Value = account.FirstName;
                Response.Cookies["lastname"].Value = account.LastName;
                Response.Cookies["email"].Value = account.Email;
                Response.Cookies["gender"].Value = student.Gender;
                Response.Cookies["clr"].Value = "1";
                AssessmentDimensionsRatingClient adrc = new AssessmentDimensionsRatingClient();
                for (var i = 0; i < dimensions.Length; i++)
                {
                    AssessmentDimensionsRating dimensionsRating = adrc.GetByPartitionAndRowKey(student.School, account.Email + dimensions[i]);
                    if (dimensionsRating != null)
                    {
                        Response.Cookies[dimensions[i]].Value = dimensionsRating.Value;
                    }
                }
                return RedirectToAction("Index", "StudentPortal");
            }
        }

        public ActionResult Logout()
        {
            if (AuthTokens[3] == "student")
            {
                Response.Cookies["gender"].Expires = DateTime.Now.AddDays(-1d);
                Response.Cookies["firstname"].Expires = DateTime.Now.AddDays(-1d);
                Response.Cookies["lastname"].Expires = DateTime.Now.AddDays(-1d);
                Response.Cookies["email"].Expires = DateTime.Now.AddDays(-1d);
                Response.Cookies["question1"].Expires = DateTime.Now.AddDays(-1d);
                Response.Cookies["clr"].Expires = DateTime.Now.AddDays(-1d);
                for (var i = 0; i < dimensions.Length; i++)
                {
                    Response.Cookies[dimensions[i]].Expires = DateTime.Now.AddDays(-1d);
                }
                HttpCookieCollection cookies = Request.Cookies;
                for (var i = 0; i < cookies.Count; i++)
                {
                    string cookiename = cookies[i].Name;
                    if (cookiename.Contains("dolcode_"))
                    {
                        Response.Cookies[cookiename].Expires = DateTime.Now.AddDays(-1d);
                    }
                }
            }
            Response.Cookies["sessionkey"].Expires = DateTime.Now.AddDays(-1d);
            Response.Cookies["sessionusername"].Expires = DateTime.Now.AddDays(-1d);
            return RedirectToAction("Index", "Home");
        }
        [HttpGet]
        public ActionResult ResetPassword()
        {
            if (AuthTokens != null)
            {
                return RedirectToAction("Index");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ResetPassword(string email)
        {
            UserAccountClient uac = new UserAccountClient();
            UserAccount account = uac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(email), email);
            if (account != null)
            {
                string password = Password.TempPassword();
                account.Password = password;
                uac.Update(account);
                SendResetPasswordEmail(email, password, account.FirstName);
                return RedirectToAction("LogIn");
            }
            ViewBag.Response = "Account not found";            
            return View();
        }
        [HttpGet]
        public ActionResult ChangePassword()
        {
            if (AuthTokens == null)
            {
                return RedirectToAction("LogIn");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ChangePassword(string oldPassword, string newPassword, string confirmNewPassword)
        {
            if (AuthTokens == null)
            {
                return RedirectToAction("LogIn");
            }
            string email = AuthTokens[1];
            UserAccountClient uac = new UserAccountClient();
            UserAccount account = uac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(email), email);
            if (account == null)
            {
                return RedirectToAction("LogIn");
            }
            else if (account.Password == oldPassword && Password.checkPassword(newPassword) && newPassword == confirmNewPassword)
            {
                account.Password = newPassword;
                uac.Update(account);
                SendPasswordChangeEmail(email);
                ViewBag.PasswordUpdated = true;
            }
            return View();
        }
        public ActionResult ConfirmEmail(string id)
        {
            if (id != null)
            {
                SimpleAES aes = new SimpleAES();
                string email = aes.DecryptString(id);
                UserAccountClient uac = new UserAccountClient();
                UserAccount account = uac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(email), email);
                if (account != null)
                {
                    account.EmailConfirmed = true;
                    uac.Update(account);
                    if (account.ProfileType == "student")
                    {
                        StudentProfileClient spc = new StudentProfileClient();
                        StudentProfile student = spc.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(account.Email), account.Email);
                        string sessionkey = ClientSession.GetClientSessionKey("user", account.Email, account.FirstName + " " + account.LastName, "student");
                        Response.Cookies["sessionkey"].Value = sessionkey;
                        Response.Cookies["sessionusername"].Value = account.Email;
                        Response.Cookies["firstname"].Value = account.FirstName;
                        Response.Cookies["lastname"].Value = account.LastName;
                        Response.Cookies["email"].Value = account.Email;
                        Response.Cookies["gender"].Value = student.Gender;
                    }
                    else if (account.ProfileType == "administrator")
                    {
                        string sessionkey = ClientSession.GetClientSessionKey("user", account.Email, account.FirstName + " " + account.LastName, "administrator");
                        Response.Cookies["sessionkey"].Value = sessionkey;
                        Response.Cookies["sessionusername"].Value = account.Email;
                    }
                    return View();
                }
                else
                {
                    ViewBag.ErrorMessage = "No account found";
                }
            }
            return RedirectToAction("LogIn");
        }

        public ActionResult ResendVerificationEmail(string id)
        {
            UserAccountClient uac = new UserAccountClient();
            UserAccount account = uac.GetByPartitionAndRowKey(UserAccountClient.GetPartitionKeyForEmail(id), id);
            if (account != null)
            {
                if (account.EmailConfirmed == false)
                {
                    SendVerificationEmail(id, account.FirstName);
                    ViewBag.ResendDone = true;
                }
            }
            return RedirectToAction("LogIn");
        }
        private void SendVerificationEmail(string email, string name)
        {
            SimpleAES aes = new SimpleAES();
            string token = aes.EncryptToString(email.ToLower());
            string url = "http://CareerThesaurus.com/Account/ConfirmEmail/" + token;
            EmailManager emailManager = new EmailManager();
            string str = "<div>Hi " + name + ",</div><br><div>Thanks for creating an account with CareerThesaurus. Click below to confirm your email address:</div>" +
                "<a href=\"" + url + "\">" + url + "</a><br><br>" +
                "<div>If you have problems, please paste the above URL into your web browser. </div><br><div>Thanks,</div><div>CareerThesuarus Support </div>";
            emailManager.SendMail("no-reply@careerthesaurus.com", "CareerThesaurus", email, "Account Notification - Confirm Email", str);
        }
        private void SendResetPasswordEmail(string email, string password, string name)
        {
            EmailManager emailManager = new EmailManager();
            string str = "	<div>Hi " + name + ",</div><br><div>As requested, we have reset your CareerThesaurus password.</div<br>" +
                "<div>Your new temporary password is <b>" + password + "</b></div><br>" + 
                "<div>Please note that we recommend you to change your password once you logged in to your account. " +
                "To change your password, navigate to CareerThesaurus.com/Account/ChangePassword after you logged in.</div><br>" +
                "<div>If you did not request that your password be changed, please contact CareerThesaurus Support.</div><br><div>Thanks,</div><div>CareerThesuarus Support </div>";
            emailManager.SendMail("no-reply@careerthesaurus.com", "CareerThesaurus", email, "Account Notification - Reset Password", str);
        }
        private void SendPasswordChangeEmail(string email)
        {
            EmailManager emailManager = new EmailManager();
            string str = "<div>Your Password has been successfully changed<div><br>" +
                "<div>If you did not request that your password be changed, please contact CareerThesaurus Support.</div><br><div>Thanks,</div><div>CareerThesuarus Support </div>";
            emailManager.SendMail("no-reply@careerthesaurus.com", "CareerThesaurus", email, "Account Notification - Password Changed", str);
        }
    }
}
