@using SkillCowResponsive.Classes.Cloud.TableStorage.School;
@using SkillCowResponsive.Classes.Cloud.TableStorage.SchoolToTeacherConnection;
@{
    SchoolToTeacherConnectionClient sttcc = new SchoolToTeacherConnectionClient();
    SchoolAccountClient sac = new SchoolAccountClient();
    ViewBag.Title = "Bytrait";
}



<link href="~/Content/css/Analytics/analytics.css" rel="Stylesheet" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        var MyArray = [];
        var $Items = $('.statsBlock');

        var i = 0;
        $Items.each(
          function () {

              $(this).delay(100 * i);
              $(this).animate({ width: $(this).attr('data-width') }, 800);
              i++
          }
        );

    });

    $(document).ready(function () {
        var MyArray = [];
        var $Items = $('.right');

        var i = 0;
        $Items.each(
          function () {

              $(this).delay(100 * i);
              $(this).animate({ width: '190px', opacity: '0.8' }, "slow");
              i++
          }
        );

    });

</script>

<div class="pageContainer" id="Bytrait">
    <div class="container">

        <div class="row orgRow">
            <div class="classificationCrumbs col-lg-6 col-md-6 col-sm-6 col-xs-12">
                @*<ol class="breadcrumb">
                <li><a href="../../Administrator">Administrator Home</a></li>
                <li><a href="School">School</a></li>
            </ol>*@


                <a href="../Analytics">Administrator Home<i class="icon-right-open-big"></i></a>
                <a href="../Analytics">Analytics<i class="icon-right-open-big"></i></a>

            </div>

        </div>

        <div class="row">

            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">


                <h2 class="reportHeader">PERSONALITY TRAITS</h2>
            </div>
        </div>

        <br />
     <br />
            <div class="row">
                <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                    <label class="control-label">School:</label>
                </div>
                <div class="col-lg-5 col-md-5-col-sm-5 col-xs-12">
                    <div class="dropdown">
                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdown-school" data-toggle="dropdown">

                            <span data-bind="test:label">
                                Select School
                            </span>

                            <span class="caret"></span>
                        </button>

                        <ul class="dropdown-menu" role="menu">
                            @{
                                string teacher = ViewBag.Email;
                                List<SchoolToTeacherConnection> connections = new List<SchoolToTeacherConnection>(sttcc.GetAllByPartition(teacher));
                                if (connections.Count == 0)
                                {
                                    <li role="presentation"><a role="menuitem" tabindex="-1" href="#">No schools added</a></li>
                                }
                                else
                                {
                                    foreach (SchoolToTeacherConnection connection in connections)
                                    {
                                        SchoolAccount school = sac.GetByPartitionAndRowKey("school", connection.RowKey);
                                        <li id="btn1" role="presentation"><a role="menuitem"  href="#" data-rowkey="@school.RowKey" onclick="getGroups(this);">@school.SchoolName</a></li>
                                    }
                                }
}

                        </ul>


                      
                    </div>
                </div>
              
               

                @*<div class="form-group">
                        <label for="extroverts" class="col-sm-2 control-label">
                        Teacher:
                    </label>
                    <div class="col-sm-4">
                        <div class="dropdown">
                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdown-teacher" data-toggle="dropdown">
                                dropdown
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdown-teacher">
                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Action</a></li>

                            </ul>
                        </div>
                    </div>
                    </div>*@



                <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                    <label class="control-label">Groups:</label>
                </div>
                <div class="col-lg-5 col-md-5-col-sm-5 col-xs-12">
                    <div class="dropdown">
                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdown-class" data-toggle="dropdown">
                            <span data-bind="test:label">
                                All Groups
                            </span>
                            <span class="caret"></span>
                        </button>
                        <ul id="groups" class="dropdown-menu" role="menu" aria-labelledby="dropdown-class"></ul>
                    </div>
                </div>

            </div>
     
        <br />


            <div id="report">

                @*<form class="form-horizontal" role="form">
                        <div class="row">
                            <p class="title">Social Attitude</p>
                        </div>


                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 ">
                                <label class="control-label special forintroverts">INTROVERTS</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 col-xs-10">
                                <div class="introverts"></div>
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                                <label class="control-label special forintroverts">1</label>
                            </div>
                        </div>


                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 ">
                                <label class="control-label special forintroverts">INTROVERTS</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 col-xs-10">
                                <div class="introverts"></div>
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                                <label class="control-label special forintroverts">1</label>
                            </div>
                        </div>

                        <div class="row">
                            <p class="title">Mobility and Stationary Endurance</p>

                        </div>
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 ">
                                <label class="control-label special forintroverts">INTROVERTS</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 col-xs-10">
                                <div class="introverts"></div>
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                                <label class="control-label special forintroverts">1</label>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 ">
                                <label class="control-label special forintroverts">INTROVERTS</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 col-xs-10">
                                <div class="introverts"></div>
                            </div>
                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2">
                                <label class="control-label special forintroverts">1</label>
                            </div>
                        </div>
                    </form>*@

                <div class="clearer">&nbsp;</div>
                <div class="statsBlock">

                </div>
        </div>

    </div>
    </div>

<script>
    var teacher = '@ViewBag.Email';
    var dimensions = [{ label: 'attitude', total: 0, values: [{ key: 'Extrovert', count: 0 }, { key: 'Introvert', count: 0 }] },
                        { label: 'endurance', total: 0, values: [{ key: 'Mobile', count: 0 }, { key: 'Stationary', count: 0 }] },
                        { label: 'action', total: 0, values: [{ key: 'Process', count: 0 }, { key: 'Result', count: 0 }] },
                        { label: 'concentration', total: 0, values: [{ key: 'Focused', count: 0 }, { key: 'Relaxed', count: 0 }] },
                        { label: 'information', total: 0, values: [{ key: 'Facts', count: 0 }, { key: 'Imagination', count: 0 }] },
                        { label: 'processing', total: 0, values: [{ key: 'Rational', count: 0 }, { key: 'Emotional', count: 0 }] },
                        { label: 'presence', total: 0, values: [{ key: 'Present', count: 0 }, { key: 'Remote', count: 0 }] },
                        { label: 'patterns', total: 0, values: [{ key: 'Routine', count: 0 }, { key: 'Discover', count: 0 }] },
                        { label: 'compensation', total: 0, values: [{ key: 'Variable', count: 0 }, { key: 'Fixed', count: 0 }] },
    ];

    function document_ready() {
    
    }

    function getGroups(school) {
        $.ajax({
            url: appserverurl + '/Analytics/GetGroupsForSchool',
            method: 'POST',
            dataType: 'json',
            data: {
                school: $(school).data('rowkey'),
                teacher: teacher
            }
        }).success(function (response) {
            var groups = response.results;
            if (groups.length != 0) {
                var html='<li  role="presentation"><a role="menuitem" tabindex="-1" href="#" data-school="' + $(school).data('rowkey') + '" data-rowkey="" onclick="getData(this)"></a></li>';
                for (var i = 0; i < groups.length; i++) {
                    html += '<li id="btn2" role="presentation"><a role="menuitem" tabindex="-1" href="#" data-school="' + $(school).data('rowkey') + '" data-rowkey="' + groups[i].Group + '" onclick="getData(this)">' + groups[i].Group + '</a></li>'
                }
                $('#groups').html(html);
            } else {

            }
        }).error(function (error) {

        });
    }

    function getData(group) {
        $.ajax({
            url: appserverurl + '/analytics/GetDimensions',
            method: 'POST',
            dataType: 'json',
            data: {
                school: $(group).data('school'),
                teacher: teacher,
                group: $(group).data('rowkey')
            }
        }).success(function (response) {
            var data = response.results;
            var html = '';
            for (var i = 0 ; i < dimensions.length; i++) {
          

                html += '<div id="group" class="row">' +
                            '<div class="col-lg-10 col-md-offset-2 col-sm-12 col-xs-12">' +
                                '<div>  <span data-width="0">&nbsp;</span><span class="text-center">' + dimensions[i].label + '</span></div>' +
                                '</div>' +
                            '</div>' +

                         '</div>';


                for (var j = 0 ; j < dimensions[i].values.length; j++) {
                    var index = data.map(function (x) { return x.name; }).indexOf(dimensions[i].values[j].key);
                    if (index != -1) {
                        dimensions[i].values[j].count = data[index].count;
                        dimensions[i].total += data[index].count;
                    }





                    html += '<div class="row">' +
    '<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">' +

        '<div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" class="right"><span>&nbsp;</span><span class="right itemtest">' + dimensions[i].values[j].key + '</span></div>' +

       ' <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" style="text-align:left"><span class="statsBlock" data-count="' + dimensions[i].values[j].count + '">&nbsp;</span>' + dimensions[i].values[j].count + '</div>' +
   ' </div>' +
   '</div>';

                }
            }




            $('#report').html(html);
            $('.statsBlock').each(function (index, element) {
                var count = parseInt($(element).data('count')) * 80;
                var total = dimensions[Math.floor(index / 2)].total;

                $(element).delay(100 * index);
                $(element).animate({ width: count / total + '%', opacity: '0.8' }, "slow");
                index++

            });


            
            
            $.fn.countTo = function (options) {
      
                options = options || {};
        
                return $(this).each(function () {
            
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                $self = $(this),
                loopCount = 0,
                value = settings.from,
                data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.children('.count').html(formattedValue);
                  

                    }
             
                });
            };

            $.fn.countTo.defaults = {
                from: 0, // the number the element should start at
                to: 0, // the number the element should end at
                speed: 1000, // how long it should take to count between the target numbers
                refreshInterval: 10, // how often the element should be updated
                decimals: 1, // the number of decimal places to show
                formatter: formatter, // handler for formatting the value before rendering
                onUpdate: null, // callback method for every time the element is updated
                onComplete: null // callback method for when the element finishes updating
            };

            /* ----------------------Counter------------------------------ */
            if ($('.counter').length) {
                var counter = $('.counter');
                if (!Modernizr.touch) {
                    counter.waypoint(function (direction) {
                        if (direction == 'down') {
                            counter.countTo();
                        }
                    }, { offset: '64%' });
                } else { counter.countTo(); }
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").replace(/\.\d/, '');
            };



            //var divpos = $("#careersSection").offset().top;
            //var interval = setInterval(function () {
            //    if ($(window).scrollTop() >= divpos - 650) {
            //        var animDelay = 0;
            //        $('.imageCell').each(function () {
            //            $(this).delay(animDelay).show("scale", { percent: 100, origin: ["middle", "center"] }, 500)

            //            animDelay += 500;
            //        });
            //        clearInterval(interval);
            //    }
            //}, 250);


            // $('#textEditorOverlay').stop(true, true).delay(300).show("scale", { percent: 100, origin: ["middle", "center"] }, 500);
         
          
         
             
       
        }).error(function (response) {
            console.log(response);
        });
    }

    $(document.body).on('click', '.dropdown-menu li', function (event) {

        var $target = $(event.currentTarget);

        $target.closest('.dropdown')
           .find('[data-bind="test:label"]').text($target.text())
              .end()
           .children('.dropdown-toggle').dropdown('toggle');

        return false;

    });
    /*  $(document.body).on('click', '#btn1', function (event) {
   
   
          $(".dropdown").find("#dropdown-class").text("Select Group") + ' <span class="caret"></span>';
            
   
      });*/

 

    </script>

            