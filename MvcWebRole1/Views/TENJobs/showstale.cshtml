@using SkillCow.Classes.Cloud.TableStorage
@using System.Xml
@using SkillCow.Classes.Helpers

@{
    JobPostingClient jpc = new JobPostingClient();

    Dictionary<string, XmlNode> xmlitems = new Dictionary<string, XmlNode>();
    
    XmlNodeList items = Model.GetElementsByTagName("listing");
    foreach (XmlNode node in items)
    {
        string referencenumber = node.E("reference_number").Substring(0,19);
        xmlitems.Add(referencenumber, node);
    }
    
    
}
    <div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">

        <h1>Cross Matching</h1> 

        <table>
            <tr>
                <th>#</th>
                <th>Status</th>
                <th>Match</th>
                <th>
                    Reference ID
                </th>
                <th>
                    Mask
                </th>
                <th>
                    Job Title
                </th>
                <th>
                    Company Name
                </th>
                <th>
                    Formatted Location
                </th>
                <th>
                    Source
                </th>
                <th>
                    Position Location Id
                </th>
                <th>
                    Position Location Name
                </th>
                <th>
                    URL
                </th>
                <th>
                    Attitude
                </th>
                <th>
                    Information
                </th>
                <th>
                    Processing
                </th>
                <th>
                    Action
                </th>
                <th>
                    Endurance
                </th>
                <th>
                    Presence
                </th>
                <th>
                    Concentration
                </th>
                <th>
                    Patterns
                </th>
                <th>
                    Compensation
                </th>
                <th>
                    Beauty
                </th>
                <th>
                    Helping
                </th>
                <th>
                    Adventure
                </th>
                <th>
                    Safety
                </th>
                <th>
                    Technology
                </th>
                <th>
                    People
                </th>
                <th>
                    Science
                </th>
                <th>
                    Easy
                </th>
                <th>
                    Duty
                </th>
                <th>
                    Growth
                </th>
                <th>
                    Creativity
                </th>
                <th>
                    Admiration
                </th>
                <th>
                    Competition
                </th>
                <th>
                    Animals
                </th>
                <th>
                    Politics
                </th>
            
            
            </tr>
    
        @{
            int cntscp = 0;
        
            List<JobPosting> livelistings = new List<JobPosting>();    
            List<JobPosting> deadlistings = new List<JobPosting>();    
        }


        @foreach (JobPosting item in jpc.GetAllBySource("TEN").Execute())
        {
            string rowcolor = "";

            bool matched = false;

            if (item.ReferenceId.Length >= 19)
            {
                matched = xmlitems.ContainsKey(item.ReferenceId.Substring(0, 19));
            }
            
            if (!matched)
            {
                rowcolor = "rgba(255,0,0,0.8)";

                if (item.IsLive)
                {
                    item.IsLive = false;
                    deadlistings.Add(item);
                }
                
            }
            else
            {
                if (!item.IsLive)
                {
                    rowcolor = "rgba(0,255,0,0.8)";

                    if (item.IsLive)
                    {
                        item.IsLive = true;
                        livelistings.Add(item);
                    }
                    
                }
            }

            
            
            <tr style="background-color: @(rowcolor)">
            
                <td>@(++cntscp)</td>
                <td>@(item.IsLive ? "Live" : "Not Live" )</td>
                <td>@(matched?"MATCHED":"")</td>
                <td>
                    <nobr>@item.ReferenceId</nobr>
                </td>
                <td>
                    <nobr>@item.AttributeMask @item.ImportantThingsMask</nobr>
                </td>
                <td>
                    <nobr>@Html.DisplayFor(modelItem => item.JobTitle)</nobr>
                </td>
                <td>
                    <nobr>@Html.DisplayFor(modelItem => item.CompanyName)</nobr>
                </td>
                <td>
                    <nobr>@Html.DisplayFor(modelItem => item.FormattedLocation)</nobr>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Source)
                </td>
            
                <td>
                    <nobr>@Html.DisplayFor(modelItem => item.PositionLocationId)</nobr>
                </td>
                <td>
                    <nobr>@Html.DisplayFor(modelItem => item.PositionLocationName)</nobr>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.URL)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionAttitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionInformation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionProcessing)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionAction)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionEndurance)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionPresence)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionConcentration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionPatterns)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DimensionCompensation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsBeauty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsHelping)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsAdventure)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsSafety)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsTechnology)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsPeople)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsScience)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsEasy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsDuty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsGrowth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsCreativity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsAdmiration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsCompetition)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsAnimals)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ImportantThingsPolitics)
                </td>
            
            </tr>
            
        }
    
        @foreach (JobPosting jp in livelistings)
        {
            
            jpc.Update(jp);
        }
        @foreach (JobPosting jp in deadlistings)
        {
            
            jpc.Update(jp);
        }
        </table>
    </div>



    <div class="pagecontent rounded20" style="margin: 0 auto; background-color: rgba(255,255,255,0.5); text-align: left; padding: 20px;">
        <h1>All XML items</h1> 
        <table>

                @{
                    int cnt=0;
                    foreach (XmlNode node in items)
                    {
                        XmlNode programvaluesnode = node.SelectSingleNode("program_values");
                        XmlNode programnode = null;
                        if (programvaluesnode != null)
                        {
                            XmlNodeList programnodes = programvaluesnode.SelectNodes("item");
                            if (programnodes.Count > 0)
                            {
                                programnode = programnodes[0];
                            }
                        }

                        <tr>
                        <td>@(++cnt)</td>
                        <td>@node.E("reference_number")</td>

                        <td>@node.E("client_id")</td>
                        <td>@node.E("client_name")</td>
                        <td>@programnode.E("value")</td>
                        <td>@node.E("city")</td>
                        <td>@node.E("state")</td>
                        <td>@node.E("country")</td>
                
                        <td>@node.E("form_id")</td>
                        <td>@node.E("campus_key")</td>
                        <td>@node.E("campus_value")</td>

                        <td>@node.E("date")</td>
                        
                        <td>@programnode.E("link")</td>
                        <td>@programnode.E("job_type")</td>
                
                        </tr>
                        
                    }
                }

        </table>
    </div>